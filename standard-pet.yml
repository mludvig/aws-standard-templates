# ============================= #
# !!! Do NOT edit this file !!! #
# ============================= #
# Instead edit standard-pet.template.yml and run 'import-files.py' again
---
AWSTemplateFormatVersion: '2010-09-09'

Description: Standard Pet-instance

Metadata:
  Author: Michael Ludvig <michael.ludvig@enterpriseit.co.nz>
  Description: |-
    SnapshotLambda creates AMI from the running instance based on the schedule.

Parameters:
  AssignSecurityGroup:
    Description: SecurityGroup ID to assign to the instance.
    Type: AWS::EC2::SecurityGroup::Id
    Default: sg-0f677e63

  AssignElasticIP:
    Description: Allocate a new EIP or use only Private IPs?
    Type: String
    AllowedValues:
    - true
    - false
    Default: false

  HostedZone:
    Default: aws.e-it.co.nz
    Description: Route53 zone for the DNS records.
    Type: String

  HostedZoneId:
    Description: Route53 zone ID for the DNS records.
    Type: String
    Default: Z17UY0MIR6S5KA

  ImageId:
    Description: AMI ID to use
    Type: AWS::EC2::Image::Id
    Default: ami-942dd1f6   # ami-942dd1f6 = amzn-ami-hvm-2017.09.1.20180115-x86_64-gp2

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro
    ConstraintDescription: Must be a valid EC2 instance type.

  KeyName:
    Default: aws-prod
    Description: Name of an existing EC2 KeyPair to enable SSH access to the EC2 instances
    Type: AWS::EC2::KeyPair::KeyName

  SnapshotDayOfWeek:
    Description: Day of week when Snapshot will be taken. Format "*" or "MON-SUN" or "WED,SAT"
    Type: String
    Default: MON-SUN

  SnapshotHour:
    Description: GMT Timezone hour when Snapshot will be taken. Set to -1 to disable
      automatic snapshots.
    Type: Number
    MaxValue: 23
    MinValue: -1
    Default: 17

  SnapshotMinute:
    Description: Minute after Snapshot hour when Snapshot will be taken. Ignored if
      SnapshotHour == -1.
    Type: Number
    MaxValue: 59
    MinValue: 0
    Default: 30

  SnapshotRetainDays:
    Description: Number of days to retain the snapshots for. Older Snapshots will
      be deleted.
    Type: Number
    MinValue: 1
    Default: 14

  SnsTopicArn:
    Description: SNS Notification Topic for AutoScaling and CloudWatch events
    Type: String
    Default: arn:aws:sns:ap-southeast-2:908357564651:EIT_AWS_Support

  VpcId:
    Description: The VPC where this stack will be deployed
    Type: AWS::EC2::VPC::Id
    Default: vpc-55026a3c

  SubnetId:
    Description: The subnet where this instance will be deployed
    Type: AWS::EC2::Subnet::Id
    Default: subnet-0996e914be138f8b4

Conditions:
  AssignElasticIP: !Equals [ !Ref AssignElasticIP, true ]
  AutoSnapshot: !Not [ !Equals [ !Ref SnapshotHour, -1 ] ]

Resources:
  DNSRecordPrivate:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${HostedZone}."
      Name: !Sub "${AWS::StackName}.${HostedZone}."
      ResourceRecords:
      - !GetAtt Instance.PrivateIp
      TTL: 900
      Type: A

  ElasticIP:
    Type: AWS::EC2::EIP
    Condition: AssignElasticIP

  DNSRecordPublic:
    Type: AWS::Route53::RecordSet
    Condition: AssignElasticIP
    Properties:
      HostedZoneName: !Sub "${HostedZone}."
      Name: !Sub "${AWS::StackName}-pub.${HostedZone}."
      ResourceRecords:
      - Ref: ElasticIP
      TTL: 900
      Type: A

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
      Path: /
      Policies:
      - PolicyName: SelfSnapshot
        PolicyDocument:
          Statement:
          - Action:
            - ec2:DescribeInstance
            Effect: Allow
            Resource: '*'
          - Action:
            - cloudformation:DescribeStackResource
            Effect: Allow
            Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/SnapshotLambda"
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            #Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SnapshotLambda}"
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-SnapshotLambda-*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: InstanceRole

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: OVM Manager Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - Description: Access from EIT Internal - futher restricted by iptables
        IpProtocol: -1
        CidrIp: 192.168.128.0/20
      - Description: Access from EIT AWS - futher restricted by iptables
        IpProtocol: -1
        CidrIp: 192.168.144.0/22

  Instance:
    Type: AWS::EC2::Instance
    Properties:
      AssociatePublicIpAddress: !If [ AssignElasticIP, "true", "false" ]
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds:
      - !Ref AssignSecurityGroup
      - !Ref InstanceSecurityGroup
      #BlockDeviceMappings:
      #- DeviceName: "/dev/sda1"
      #  Ebs:
      #    VolumeType: "gp2"
      #    DeleteOnTermination: "true"
      #    VolumeSize: "25"
      SubnetId: !Ref SubnetId
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
      UserData:
        Fn::Base64: !Sub |-
          #cloud-config
          timezone: Pacific/Auckland
          hostname: ${AWS::StackName}.${HostedZone}
          preserve_hostname: false
          ssh_pwauth: True
          runcmd:
          - if [ -f /etc/profile.d/local.sh ]; then exit; fi
          - yum -y install epel-release
          - yum-config-manager --enable epel
          - "echo \"ssh_pwauth: true\" >> /etc/cloud/cloud.cfg.d/90_eit.cfg"
          - /opt/aws/bin/cfn-init -v -r Instance --region ${AWS::Region} -s ${AWS::StackId}
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              bash-completion: []
              git: []
              patch: []
              jq: []
          files:
            /etc/profile.d/local.sh:
              source: https://gist.githubusercontent.com/mludvig/3840d8030bac5e7db95921baff87989a/raw/profile-local.sh
              owner: root
              group: root
              mode: '0644'
            /etc/pythonstart.py:
              source: https://gist.githubusercontent.com/mludvig/a0a72e4e363e67101d673f11da2160d7/raw/pythonstart.py
              owner: root
              group: root
              mode: '0644'
            /root/eit-setup.sh:
              source: https://gist.githubusercontent.com/mludvig/8d1103c90846ebf0bce49ea5ab2d36ab/raw/eit-setup.sh
              owner: root
              group: root
              mode: '0755'
          commands:
            10-AD-Test:
              command: "echo 'test -f /etc/sssd/sssd.conf || echo -e \"\\n\\e[1;33mSet up the instance and join to AD: \\e[1;31msudo /root/eit-setup.sh\\e[0m\\n\"' >> /home/ec2-user/.bash_profile"
            20-Git-Prompt:
              command: cp -vf /usr/share/doc/git-*/contrib/completion/git-prompt.sh /etc/bash_completion.d/
            30-Disable-CloudInit:
              # We don't want the instances re-spawn from Snapshot AMI reconfigured after boot
              command: chkconfig cloud-init off

  SnapshotRole:
    Type: AWS::IAM::Role
    Condition: AutoSnapshot
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/ReadOnlyAccess
      Path: /
      Policies:
      - PolicyName: CloudWatchLogsPolicy
        PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
      - PolicyName: SnapshotPolicy
        PolicyDocument:
          Statement:
          - Action:
            - iam:PassRole
            - ec2:CreateImage
            - ec2:CreateTags
            - ec2:RegisterImage
            - ec2:DeregisterImage
            - autoscaling:UpdateAutoScalingGroup
            - autoscaling:CreateLaunchConfiguration
            - autoscaling:DeleteLaunchConfiguration
            - cloudformation:UpdateStack
            Effect: Allow
            Resource: '*'

  SnapshotScheduler:
    Type: AWS::Events::Rule
    Condition: AutoSnapshot
    Properties:
      Description: Snapshot scheduler
      ScheduleExpression: !Sub "cron(${SnapshotMinute} ${SnapshotHour} ? * ${SnapshotDayOfWeek} *)"
      Targets:
      - Arn: !GetAtt SnapshotLambda.Arn
        Id: SnapshotLambda_Target
        Input: '{ "reboot": true }'
      - Arn: !GetAtt SnapshotRemoverLambda.Arn
        Id: SnapshotRemoverLambda_Target

  SnapshotSchedulerPermission:
    Type: AWS::Lambda::Permission
    Condition: AutoSnapshot
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SnapshotLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SnapshotScheduler.Arn

  SnapshotRemoverSchedulerPermission:
    Type: AWS::Lambda::Permission
    Condition: AutoSnapshot
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SnapshotRemoverLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SnapshotScheduler.Arn

  SnapshotLambda:
    Type: AWS::Lambda::Function
    Condition: AutoSnapshot
    Properties:
      Code:
        ZipFile:
          Fn::Join:
          - '

            '
          -
            - "#!/usr/bin/env python3"
            - "import os"
            - "import boto3"
            - "from datetime import datetime,timedelta"
            - "import time"
            - "ec2=boto3.client('ec2')"
            - "def create_image(instance_id,reboot):"
            - " def _print_log(message):"
            - "  print('%s @ %s: %s'%(instance_id,snapshot_timestamp,message))"
            - " snapshot_timestamp=datetime.strftime(datetime.now(),'%s')"
            - " _print_log('Snapshotting instance')"
            - " instance=ec2.describe_instances(InstanceIds=[instance_id])"
            - " description=''"
            - " tags={}"
            - " try:"
            - "  tags={item['Key']:item['Value']for item in instance['Reservations'][0]['Instances'][0]['Tags']}"
            - " except:"
            - "  pass"
            - " if 'Name' in tags:"
            - "  description=tags['Name']"
            - " elif 'aws:cloudformation:stack-name' in tags:"
            - "  description=tags['aws:cloudformation:stack-name']"
            - " else:"
            - "  description=instance_id"
            - " name=instance_id+'_'+snapshot_timestamp"
            - " description=description+' '+datetime.strftime(datetime.now(),'%Y-%m-%d %H-%M-%S')"
            - " r=ec2.create_image(InstanceId=instance_id,Name=name,Description=description,NoReboot=not reboot)"
            - " image_id=r['ImageId']"
            - " _print_log('Created image: id=%s name=%s'%(image_id,name))"
            - " image_tags=[{'Key':'SnapshotTimestamp','Value':snapshot_timestamp},{'Key':'InstanceId','Value':instance_id},]"
            - " if 'Name' in tags:"
            - "  image_tags.append({'Key':'Name','Value':tags['Name']})"
            - " if 'aws:cloudformation:stack-name' in tags:"
            - "  image_tags.append({'Key':'StackName','Value':tags['aws:cloudformation:stack-name']})"
            - " ec2.create_tags(Resources=[image_id],Tags=image_tags)"
            - " image_tags_string=' '.join(map(lambda x:'%(Key)s=%(Value)s'%x,image_tags))"
            - " _print_log('Created tags: %s'%(image_tags_string))"
            - " return(image_id,snapshot_timestamp)"
            - "def lambda_handler(event,context):"
            - " try:"
            - "  instance_id=os.environ['instance_id']"
            - " except:"
            - "  print('ERROR: Environment variables must be set: instance_id')"
            - "  raise"
            - " try:"
            - "  reboot=event.get('reboot',True)"
            - "  assert(type(event['reboot'])in[bool,int])"
            - " except:"
            - "  print('ERROR: Event JSON expected: { \"reboot\": true / false }')"
            - "  raise"
            - " image_id,snapshot_timestamp=create_image(instance_id,reboot)"
            - " return image_id"
            - "# Created by pyminifier (https://github.com/liftoff/pyminifier)"
            - ""
      Environment:
        Variables:
          instance_id: !Ref Instance
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt SnapshotRole.Arn
      Runtime: python3.6
      Timeout: 10

  SnapshotRemoverLambda:
    Type: AWS::Lambda::Function
    Condition: AutoSnapshot
    Properties:
      Code:
        ZipFile:
          Fn::Join:
          - '

            '
          -
            - "import os"
            - "import boto3"
            - "from datetime import datetime,timedelta"
            - "import time"
            - "ec2=boto3.client('ec2')"
            - "def deregister_old_images(asg_name,instance_id,retain_days):"
            - " oldest_time=datetime.now()-timedelta(days=retain_days)"
            - " oldest_timestamp=int(time.mktime(oldest_time.timetuple()))"
            - " print('Purging images older than: %s'%oldest_time.strftime('%Y-%m-%d %H-%M-%S'))"
            - " filters=[{'Name':'tag-key','Values':['SnapshotTimestamp']}]"
            - " if asg_name:"
            - "  filters.append({'Name':'tag:AsgName','Values':[asg_name]})"
            - " if instance_id:"
            - "  filters.append({'Name':'tag:InstanceId','Values':[instance_id]})"
            - " images=ec2.describe_images(Owners=['self'],Filters=filters)"
            - " for image in images['Images']:"
            - "  try:"
            - "   tags={item['Key']:item['Value']for item in image['Tags']}"
            - "   snapshot_timestamp=int(tags['SnapshotTimestamp'])"
            - "  except:"
            - "   continue"
            - "  if snapshot_timestamp<oldest_timestamp:"
            - "   print('%s: Deregistering image'%image['ImageId'])"
            - "   ec2.deregister_image(ImageId=image['ImageId'])"
            - "  else:"
            - "   print('%s: Retaining image: name=%s created=%s'%(image['ImageId'],image['Name'],image['CreationDate']))"
            - "def lambda_handler(event,context):"
            - " try:"
            - "  asg_name=os.environ.get('asg_name')"
            - "  instance_id=os.environ.get('instance_id')"
            - "  assert(asg_name or instance_id)"
            - "  retain_days=int(os.environ['retain_days'])"
            - " except:"
            - "  print('ERROR: Environment variables must be set: asg_name or instance_id, retain_days')"
            - "  raise"
            - " deregister_old_images(asg_name,instance_id,retain_days)"
            - "# Created by pyminifier (https://github.com/liftoff/pyminifier)"
            - ""
      Environment:
        Variables:
          instance_id: !Ref Instance
          retain_days: !Ref SnapshotRetainDays
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt SnapshotRole.Arn
      Runtime: python3.6
      Timeout: 10
