---
AWSTemplateFormatVersion: '2010-09-09'

Description: Standard Auto-healing template

Metadata:
  Author: Michael Ludvig <michael.ludvig@enterpriseit.co.nz>
  Description: |-
    Create ASG with min=1/max=1.
    LaunchLambdaEIP re-assigns EIP to the newly launched EC2
    LaunchLambdaDNS updates Route53 to point to the current private IP
    SnapshotLambda creates AMI from the running instance based on schedule
    and updates the CFN Stack and in turn the ASG launch config with
    the new AMI ID.

Parameters:
  AssignSecurityGroups:
    Description: SG IDs to assign to the instance.
    Type: List<AWS::EC2::SecurityGroup::Id>
    Default: sg-0f677e63

  AssignElasticIP:
    Description: Allocate a new EIP or use only Private IPs?
    Type: String
    AllowedValues:
    - true
    - false
    Default: false

  HostedZone:
    Default: aws.e-it.co.nz
    Description: Route53 zone for the DNS records.
    Type: String

  HostedZoneId:
    Description: Route53 zone ID for the DNS records.
    Type: String
    Default: Z17UY0MIR6S5KA

  ImageId:
    Description: AMI ID to use
    Type: AWS::EC2::Image::Id
    Default: ami-942dd1f6   # ami-942dd1f6 = amzn-ami-hvm-2017.09.1.20180115-x86_64-gp2

  InstanceType:
    Description: EC2 instance type
    Type: String
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.large
    Default: t2.micro
    ConstraintDescription: Must be an allowed EC2 instance type. Change the template
      to add more options.

  InstancePrivateIp:
    Description: Instance Private IP address, leave at 127.0.0.1, it will be auto-updated.
    Type: String
    Default: 127.0.0.1

  KeyName:
    Default: aws-prod
    Description: Name of an existing EC2 KeyPair to enable SSH access to the EC2 instances
    Type: AWS::EC2::KeyPair::KeyName

  SnapshotDayOfWeek:
    Description: Day of week when Snapshot will be taken. Format "*" or "MON-SUN" or "WED,SAT"
    Type: String
    Default: MON-SUN

  SnapshotHour:
    Description: GMT Timezone hour when Snapshot will be taken. Set to -1 to disable
      automatic snapshots.
    Type: Number
    MaxValue: 23
    MinValue: -1
    Default: 17

  SnapshotMinute:
    Description: Minute after Snapshot hour when Snapshot will be taken. Ignored if
      SnapshotHour == -1.
    Type: Number
    MaxValue: 59
    MinValue: 0
    Default: 30

  SnapshotRetainDays:
    Description: Number of days to retain the snapshots for. Older Snapshots will
      be deleted.
    Type: Number
    MinValue: 1
    Default: 14

  SnsTopicArn:
    Description: SNS Notification Topic for AutoScaling and CloudWatch events
    Type: String
    Default: arn:aws:sns:ap-southeast-2:908357564651:EIT_AWS_Support

  SubnetIds:
    Description: The subnets where this instance can be deployed through ASG
    Type: List<AWS::EC2::Subnet::Id>
    Default: subnet-cb9f74bc,subnet-bd24e6d8

Conditions:
  AssignElasticIP: !Equals [ !Ref AssignElasticIP, true ]
  AutoSnapshot: !Not [ !Equals [ !Ref SnapshotHour, -1 ] ]

Resources:
  DNSRecordPrivate:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${HostedZone}."
      Name: !Sub "${AWS::StackName}.${HostedZone}."
      ResourceRecords:
      # LaunchLambdaDNS will update it when EC2 is started in the ASG
      - !Ref InstancePrivateIp
      TTL: 60
      Type: A

  ElasticIP:
    Type: AWS::EC2::EIP
    Condition: AssignElasticIP

  DNSRecordPublic:
    Type: AWS::Route53::RecordSet
    Condition: AssignElasticIP
    Properties:
      HostedZoneName: !Sub "${HostedZone}."
      Name: !Sub "${AWS::StackName}-pub.${HostedZone}."
      ResourceRecords:
      - Ref: ElasticIP
      TTL: 900
      Type: A

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
      Path: /
      Policies:
      - PolicyName: SelfSnapshot
        PolicyDocument:
          Statement:
          - Action:
            - ec2:DescribeInstance
            Effect: Allow
            Resource: '*'
          - Action:
            - cloudformation:DescribeStackResource
            Effect: Allow
            Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/SnapshotLambda"
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            #Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SnapshotLambda}"
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-SnapshotLambda-*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: InstanceRole

  InstanceLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: !If [ AssignElasticIP, "true", "false" ]
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups: !Ref AssignSecurityGroups
      UserData:
        Fn::Base64: !Sub |-
          #cloud-config
          timezone: Pacific/Auckland
          hostname: ${AWS::StackName}.${HostedZone}
          preserve_hostname: false
          ssh_pwauth: True
          runcmd:
          - if [ -f /etc/profile.d/local.sh ]; then exit; fi
          - yum -y install epel-release
          - yum-config-manager --enable epel
          - "echo \"ssh_pwauth: true\" >> /etc/cloud/cloud.cfg.d/90_eit.cfg"
          - /opt/aws/bin/cfn-init -v -r InstanceLaunchConfig --region ${AWS::Region} -s ${AWS::StackId}
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              bash-completion: []
              git: []
              patch: []
              jq: []
          files:
            /etc/profile.d/local.sh:
              source: https://gist.githubusercontent.com/mludvig/3840d8030bac5e7db95921baff87989a/raw/profile-local.sh
              owner: root
              group: root
              mode: '0644'
            /etc/pythonstart.py:
              source: https://gist.githubusercontent.com/mludvig/a0a72e4e363e67101d673f11da2160d7/raw/pythonstart.py
              owner: root
              group: root
              mode: '0644'
            /root/eit-setup.sh:
              source: https://gist.githubusercontent.com/mludvig/8d1103c90846ebf0bce49ea5ab2d36ab/raw/eit-setup.sh
              owner: root
              group: root
              mode: '0755'
          commands:
            10-AD-Test:
              command: "echo 'test -f /etc/sssd/sssd.conf || echo -e \"\\n\\e[1;33mSet up the instance and join to AD: \\e[1;31msudo /root/eit-setup.sh\\e[0m\\n\"' >> /home/ec2-user/.bash_profile"
            20-Git-Prompt:
              command: cp -vf /usr/share/doc/git-*/contrib/completion/git-prompt.sh /etc/bash_completion.d/
            30-Disable-CloudInit:
              # We don't want the instances re-spawn from Snapshot AMI reconfigured after boot
              command: chkconfig cloud-init off

  InstanceScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - LaunchLambdaDNSSnsSubscription
    #- LaunchLambdaEIPSnsSubscription   # This can't be conditional :(
    Properties:
      Cooldown: 60
      HealthCheckGracePeriod: 60
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref InstanceLaunchConfig
      MaxSize: 1
      MinSize: 1
      NotificationConfigurations:
      - TopicARN: !Ref SnsTopicArn
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      - TopicARN: !Ref LaunchEventSnsTopic
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
        PropagateAtLaunch: true
      TerminationPolicies:
      - OldestLaunchConfiguration
      - OldestInstance
      VPCZoneIdentifier: !Ref SubnetIds

  LaunchEventSnsTopic:
    Type: AWS::SNS::Topic

  LaunchLambdaDNSSnsSubscription:
    Type: AWS::SNS::Subscription
    DependsOn:
    - LaunchLambdaDNSSnsPermission
    Properties:
      Endpoint: !GetAtt LaunchLambdaDNS.Arn
      Protocol: lambda
      TopicArn: !Ref LaunchEventSnsTopic

  LaunchLambdaDNSSnsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LaunchLambdaDNS
      Principal: sns.amazonaws.com
      SourceArn: !Ref LaunchEventSnsTopic

  LaunchLambdaDNSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
      Path: /
      Policies:
      - PolicyName: CloudWatchLogsPolicy
        PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
      - PolicyName: LaunchLambdaDNSPolicy
        PolicyDocument:
          Statement:
          - Action:
            - iam:PassRole
            - ec2:Describe*
            - route53:ListHostedZones
            - route53:GetChange
            - cloudformation:DescribeStacks
            Effect: Allow
            Resource: '*'

          - Action:
            - route53:ChangeResourceRecordSets
            Effect: Allow
            Resource: !Sub "arn:aws:route53:::hostedzone/${HostedZoneId}"

          - Action:
            - cloudformation:UpdateStack
            Effect: Allow
            #Resource: !Ref AWS::StackId  # This doesn't work for some reason ...
            Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"

  LaunchLambdaDNS:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
          - '

            '
          - - ""
            - "%%{lambda-launcher-dns.mini.py}%%"
      Environment:
        Variables:
          cfn_stack_name: !Ref AWS::StackName
          cfn_param_name: "InstancePrivateIp"
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt LaunchLambdaDNSRole.Arn
      Runtime: python2.7
      Timeout: 10

  LaunchLambdaEIPSnsSubscription:
    Type: AWS::SNS::Subscription
    Condition: AssignElasticIP
    DependsOn:
    - LaunchLambdaEIPSnsPermission
    Properties:
      Endpoint: !GetAtt LaunchLambdaEIP.Arn
      Protocol: lambda
      TopicArn: !Ref LaunchEventSnsTopic

  LaunchLambdaEIPSnsPermission:
    Type: AWS::Lambda::Permission
    Condition: AssignElasticIP
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LaunchLambdaEIP
      Principal: sns.amazonaws.com
      SourceArn: !Ref LaunchEventSnsTopic

  LaunchLambdaEIPRole:
    Type: AWS::IAM::Role
    Condition: AssignElasticIP
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
      Path: /
      Policies:
      - PolicyName: CloudWatchLogsPolicy
        PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
      - PolicyName: LaunchLambdaEIPPolicy
        PolicyDocument:
          Statement:
          - Action:
            - ec2:DescribeInstances
            - ec2:AssociateAddress
            Effect: Allow
            Resource: '*'

  LaunchLambdaEIP:
    Type: AWS::Lambda::Function
    Condition: AssignElasticIP
    Properties:
      Code:
        ZipFile:
          Fn::Join:
          - '

            '
          - - ""
            - "%%{lambda-launcher-eip.mini.py}%%"
      Environment:
        Variables:
          elastic_ip: !Ref ElasticIP
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt LaunchLambdaEIPRole.Arn
      Runtime: python2.7
      Timeout: 10

  SnapshotRole:
    Type: AWS::IAM::Role
    Condition: AutoSnapshot
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/ReadOnlyAccess
      Path: /
      Policies:
      - PolicyName: CloudWatchLogsPolicy
        PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
      - PolicyName: SnapshotPolicy
        PolicyDocument:
          Statement:
          - Action:
            - iam:PassRole
            - ec2:CreateImage
            - ec2:CreateTags
            - ec2:RegisterImage
            - ec2:DeregisterImage
            - autoscaling:UpdateAutoScalingGroup
            - autoscaling:CreateLaunchConfiguration
            - autoscaling:DeleteLaunchConfiguration
            - cloudformation:UpdateStack
            Effect: Allow
            Resource: '*'

  SnapshotScheduler:
    Type: AWS::Events::Rule
    Condition: AutoSnapshot
    Properties:
      Description: Snapshot scheduler
      ScheduleExpression: !Sub "cron(${SnapshotMinute} ${SnapshotHour} ? * ${SnapshotDayOfWeek} *)"
      Targets:
      - Arn: !GetAtt SnapshotLambda.Arn
        Id: SnapshotLambda_Target
        Input: '{ "reboot": true }'

  SnapshotSchedulerPermission:
    Type: AWS::Lambda::Permission
    Condition: AutoSnapshot
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SnapshotLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SnapshotScheduler.Arn

  SnapshotLambda:
    Type: AWS::Lambda::Function
    Condition: AutoSnapshot
    Properties:
      Code:
        ZipFile:
          Fn::Join:
          - '

            '
          - - ""
            - "%%{lambda-snapshot-asg.mini.py}%%"
      Environment:
        Variables:
          asg_name: !Ref InstanceScalingGroup
          cfn_ami_parameter: ImageId
          cfn_stack_name: !Ref AWS::StackName
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt SnapshotRole.Arn
      Runtime: python2.7
      Timeout: 10
