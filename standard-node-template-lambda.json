{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Standard EC2 Instance stack with automatic Snapshotting",
  "Metadata": {
    "Author": "Michael Ludvig <michael.ludvig@enterpriseit.co.nz>"
  },
  "Parameters": {
    "HostedZone": {
      "Type": "String",
      "Default": "aws.e-it.co.nz",
      "Description": "Route53 zone for the DNS records. Can be empty."
    },
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Default": "vpc-55837531",
      "Description": "VPC Id of target VPC"
    },
    "SubnetId": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "The subnet where this instance should be deployed"
    },
    "DefaultSecurityGroup": {
      "Type": "String",
      "Default": "sg-0f677e63",
      "Description": "Name of an existing SG providing SSH access. Can be empty."
    },
    "RemoteAccessCIDR": {
      "Type": "String",
      "Default": "",
      "Description": "Source IP range for remote access. Either x.y.z.0/nn or leave empty."
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the EC2 instances"
    },
    "ImageId": {
      "Type": "AWS::EC2::Image::Id",
      "Description": "AMI ID to use"
    },
    "InstanceType": {
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.large",
        "m4.medium"
      ],
      "ConstraintDescription": "Must be an allowed EC2 instance type. Change the template to add more options.",
      "Default": "t2.micro",
      "Description": "EC2 instance type",
      "Type": "String"
    },
    "AssignElasticIP": {
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "false",
      "Description": "Assign Elastic IP",
      "Type": "String"
    },
    "SnapshotDayOfWeek": {
      "Type": "String",
      "Description": "Day of week when Snapshot will be taken. Format: '*' or 'MON-SUN' or 'WED,SAT'",
      "Default": "MON-SUN"
    },
    "SnapshotHour": {
      "Type": "Number",
      "MinValue": -1,
      "MaxValue": 23,
      "Description": "GMT Timezone hour when Snapshot will be taken. Set to -1 to disable automatic snapshots."
    },
    "SnapshotMinute": {
      "Type": "Number",
      "MinValue": 0,
      "MaxValue": 59,
      "Description": "Minute after Snapshot hour when Snapshot will be taken. Ignored if SnapshotHour == -1."
    },
    "SnapshotRetainDays": {
      "Type": "Number",
      "Default": 14,
      "MinValue": 1,
      "Description": "Number of days to retain the snapshots for. Older Snapshots will be deleted."
    }
  },
  "Conditions": {
    "AssignElasticIP": {
      "Fn::Equals": [ { "Ref": "AssignElasticIP" }, "true" ]
    },
    "HaveHostedZone": {
      "Fn::Not": [ { "Fn::Equals": [ { "Ref": "HostedZone" }, "" ] } ]
    },
    "AssignElasticIP_and_HaveHostedZone": {
      "Fn::And": [ { "Condition": "AssignElasticIP" }, { "Condition": "HaveHostedZone" } ]
    },
    "HaveDefaultSecurityGroup": {
      "Fn::Not": [ { "Fn::Equals": [ { "Ref": "DefaultSecurityGroup" }, "" ] } ]
    },
    "HaveRemoteAccessCIDR": {
      "Fn::Not": [ { "Fn::Equals": [ { "Ref": "RemoteAccessCIDR" }, "" ] } ]
    },
    "AutoSnapshot": {
      "Fn::Not": [ { "Fn::Equals": [ { "Ref": "SnapshotHour" }, "-1" ] } ]
    }
  },
  "Resources": {
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "S3_Access",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBuckets"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "RemoteAccessSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Condition": "HaveRemoteAccessCIDR",
      "Properties": {
        "GroupDescription": "Remote Access Security Group",
        "VpcId": { "Ref": "VpcId" },
        "Tags": [ {
          "Key": "Name",
          "Value": { "Ref": "AWS::StackName" }
        } ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "CidrIp": { "Ref": "RemoteAccessCIDR" }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": { "Ref": "ImageId" },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Ref": "KeyName" },
        "SubnetId": { "Ref": "SubnetId" },
        "SecurityGroupIds": [
          { "Fn::If": [ "HaveDefaultSecurityGroup", { "Ref": "DefaultSecurityGroup" }, { "Ref": "AWS::NoValue" } ] },
          { "Fn::If": [ "HaveRemoteAccessCIDR", { "Ref": "RemoteAccessSecurityGroup" }, { "Ref": "AWS::NoValue" } ] }
        ],
        "IamInstanceProfile": { "Ref": "InstanceProfile" },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Ref": "AWS::StackName" }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n",
                "timezone: Pacific/Auckland\n",
                "hostname: ", { "Ref": "AWS::StackName" }, ".", { "Ref": "HostedZone" }, "\n",
                "preserve_hostname: false\n",
                "runcmd:\n",
                " - yum -y install epel-release\n",
                " - yum-config-manager --enable epel\n",
                " - /opt/aws/bin/cfn-init -v -r Instance --region ", { "Ref": "AWS::Region" }, " -s ", { "Ref": "AWS::StackId" }, "\n"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": {
                "patch": [],
                "git": [],
                "bash-completion": []
              }
            },
            "files": {
              "/etc/profile.d/local.sh": {
                "source": "https://gist.githubusercontent.com/mludvig/3840d8030bac5e7db95921baff87989a/raw/profile-local.sh",
                "mode": "0644",
                "owner": "root",
                "group": "root"
              },
              "/etc/pythonstart.py": {
                "source": "https://gist.githubusercontent.com/mludvig/a0a72e4e363e67101d673f11da2160d7/raw/pythonstart.py",
                "mode": "0644",
                "owner": "root",
                "group": "root"
              },
              "/etc/pam.d/system-auth.patch": {
                "content": { "Fn::Join": [ "\n", [
                  "--- system-auth",
                  "+++ system-auth",
                  "@@ -4,12 +4,14 @@",
                  " auth        required      pam_env.so",
                  " auth        sufficient    pam_unix.so nullok try_first_pass",
                  " auth        requisite     pam_succeed_if.so uid >= 500 quiet_success",
                  "+auth        required      pam_listfile.so item=group sense=allow file=/etc/pam.d/group-access.conf onerr=fail",
                  " auth        sufficient    pam_ldap.so use_first_pass",
                  " auth        required      pam_deny.so",
                  " ",
                  " account     required      pam_unix.so broken_shadow",
                  " account     sufficient    pam_localuser.so",
                  " account     sufficient    pam_succeed_if.so uid < 500 quiet",
                  "+account     required      pam_listfile.so item=group sense=allow file=/etc/pam.d/group-access.conf onerr=fail",
                  " account     [default=bad success=ok user_unknown=ignore] pam_ldap.so",
                  " account     required      pam_permit.so"
                ] ] }
              }
            },
            "commands": {
              "10-Auth-Config": {
                "command": { "Fn::Join": [ "", [
                  "yum -y install nss-pam-ldapd pam_ldap\n",
                  "authconfig --disablewins --disablefingerprint",
                  "           --enableldap --enableldapauth --enablemkhomedir",
                  "           --ldaploadcacert=https://secure.e-it.co.nz/ca/EIT-CA-G2.pem",
                  "           --ldapserver=ldaps://ldap.e-it.co.nz --ldapbasedn=dc=e-it,dc=co,dc=nz",
                  "           --updateall\n",

                  "cd /etc/pam.d \n",
                  "rm -fv system-auth\n",
                  "cp -v system-auth-ac system-auth\n",
                  "ln -sfv system-auth password-auth\n",
                  "patch -p0 < system-auth.patch\n",

                  "echo -e 'wheel\neitwheel' > /etc/pam.d/group-access.conf\n",

                  "echo -e '%eitwheel ALL=(ALL) ALL' > /etc/sudoers.d/eitwheel\n",
                  "chmod 440 /etc/sudoers.d/eitwheel\n",

                  "sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config\n",
                  "service sshd restart\n"
                ] ] }
              },
              "20-Git-Prompt": {
                "command": "cp -vf /usr/share/doc/git-*/contrib/completion/git-prompt.sh /etc/bash_completion.d/"
              },
              "99-Upgrade-Reboot": {
                "command": "yum -y upgrade && reboot"
              }
            }
          }
        }
      }
    },
    "ElasticIP": {
      "Type" : "AWS::EC2::EIP",
      "Condition": "AssignElasticIP",
      "Properties" : {
        "InstanceId" : { "Ref" : "Instance" }
      }
    },
    "DNSRecordPrivate": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "HaveHostedZone",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [ "", [ { "Ref": "HostedZone" }, "." ] ]
        },
        "Name": {
          "Fn::Join": [ "", [
              { "Ref": "AWS::StackName" }, ".", { "Ref": "HostedZone" }, "."
          ] ]
        },
        "Type": "A",
        "TTL": "900",
        "ResourceRecords": [
          { "Fn::GetAtt": [ "Instance", "PrivateIp" ] }
        ]
      }
    },
    "DNSRecordPublic": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "AssignElasticIP_and_HaveHostedZone",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [ "", [ { "Ref": "HostedZone" }, "." ] ]
        },
        "Name": {
          "Fn::Join": [ "", [
              { "Ref": "AWS::StackName" }, "-pub.", { "Ref": "HostedZone" }, "."
          ] ]
        },
        "Type": "A",
        "TTL": "900",
        "ResourceRecords": [
          { "Ref": "ElasticIP" }
        ]
      }
    },

    "SnapshotScheduler": {
      "Type" : "AWS::Events::Rule",
      "Condition": "AutoSnapshot",
      "Properties" : {
        "Description": "Snapshot scheduler",
        "ScheduleExpression": { "Fn::Join": [ "", [ "cron(", { "Ref": "SnapshotMinute" }, " ", { "Ref": "SnapshotHour" }, " ? * ", { "Ref": "SnapshotDayOfWeek" }, " *)" ] ] },
        "Targets": [{
          "Arn": { "Fn::GetAtt": [ "SnapshotLambda", "Arn" ] },
          "Id": "SnapshotLambda_Target"
        }]
      }
    },
    "SnapshotSchedulerPermission": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "AutoSnapshot",
      "Properties": {
        "FunctionName": { "Ref": "SnapshotLambda" },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": [ "SnapshotScheduler", "Arn" ] }
      }
    },
    "SnapshotRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "AutoSnapshot",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "CloudWatchLogsPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          },
          {
            "PolicyName": "SnapshotPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeInstances",
                    "ec2:DescribeImages",
										"ec2:CreateImage",
                    "ec2:CreateTags",
										"ec2:RegisterImage",
                    "ec2:DeregisterImage"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "SnapshotLambda": {
      "Type": "AWS::Lambda::Function",
      "Condition": "AutoSnapshot",
      "Properties": {
        "Environment": {
          "Variables": {
            "instance_id": { "Ref": "Instance" },
            "retain_days": { "Ref": "SnapshotRetainDays" }
          }
        },
        "Handler": "index.lambda_handler",
        "Role": { "Fn::GetAtt": [ "SnapshotRole", "Arn" ] },
        "MemorySize": 128,
        "Timeout": 10,
        "Code": {
          "ZipFile":  { "Fn::Join": [ "\n", [
            "# AWS Lambda function for creating an image from a given instance.",
            "# By Michael Ludvig - https://aws.nz",
            "",
            "# Trigger this function from CloudWatch Scheduler (cron-like)",
            "# Pass the Instance ID in 'instance_id' environment variable.",
            "",
            "from __future__ import print_function",
            "import os",
            "import boto3",
            "from datetime import datetime, timedelta",
            "import time",
            "",
            "ec2 = boto3.client('ec2')",
            "",
            "def create_image(instance_id):",
            "    def _print_log(message):",
            "        print('%s @ %s: %s' % (instance_id, snapshot_timestamp, message))",
            "",
            "    snapshot_timestamp = datetime.strftime(datetime.now(), '%s')",
            "    _print_log('Snapshotting instance')",
            "    instance = ec2.describe_instances(InstanceIds=[instance_id])",
            "    description = ''",
            "    tags = {}",
            "",
            "    try:",
            "        tags = {item['Key']:item['Value'] for item in instance['Reservations'][0]['Instances'][0]['Tags']}",
            "    except:",
            "        pass",
            "",
            "    if 'Name' in tags:",
            "        description = tags['Name']",
            "    elif 'aws:cloudformation:stack-name' in tags:",
            "        description = tags['aws:cloudformation:stack-name']",
            "    else:",
            "        description = instance_id",
            "",
            "    name = instance_id + '_' + snapshot_timestamp",
            "    description = description + ' ' + datetime.strftime(datetime.now(), '%Y-%m-%d %H-%M-%S')",
            "    response = ec2.create_image(",
            "        InstanceId = instance_id,",
            "        Name = name,",
            "        Description = description,",
            "        NoReboot = False,",
            "    )",
            "    image_id = response['ImageId']",
            "    _print_log('Created image: id=%s name=%s' % (image_id, name))",
            "    image_tags = [",
            "        {'Key': 'SnapshotTimestamp', 'Value': snapshot_timestamp },",
            "        {'Key': 'InstanceId', 'Value': instance_id }",
            "    ]",
            "    if 'Name' in tags:",
            "        image_tags.append({ 'Key': 'Name', 'Value': tags['Name'] })",
            "    ec2.create_tags(Resources = [image_id], Tags = image_tags)",
            "    image_tags_string = ' '.join(map(lambda x: '%(Key)s=%(Value)s' % x, image_tags))",
            "    _print_log('Created tags: %s' % (image_tags_string))",
            "",
            "    return (image_id, snapshot_timestamp)",
            "",
            "def deregister_old_images(instance_id, retain_days):",
            "    oldest_time = datetime.now() - timedelta(days = retain_days)",
            "    oldest_timestamp = int(time.mktime(oldest_time.timetuple()))",
            "    print('Purging images older than: %s' % oldest_time.strftime('%Y-%m-%d %H-%M-%S'))",
            "",
            "    images = ec2.describe_images(Owners=['self'], Filters=[",
            "        { 'Name': 'tag:InstanceId', 'Values': [ instance_id ] },",
            "        { 'Name': 'tag-key', 'Values': [ 'SnapshotTimestamp' ] }",
            "    ])",
            "    for image in images['Images']:",
            "        try:",
            "            tags = {item['Key']:item['Value'] for item in image['Tags']}",
            "            snapshot_timestamp = int(tags['SnapshotTimestamp'])",
            "        except:",
            "            continue",
            "        if snapshot_timestamp < oldest_timestamp:",
            "            print('%s: Deregistering image' % image['ImageId'])",
            "            ec2.deregister_image(ImageId = image['ImageId'])",
            "            try:",
            "                print('%s: Image info: name=%s created=%s' % (image['ImageId'], image['Name'], image['CreationDate']))",
            "            except:",
            "                pass",
            "        else:",
            "            print('%s: Retaining image: name=%s created=%s' % (image['ImageId'], image['Name'], image['CreationDate']))",
            "",
            "def lambda_handler(event, context):",
            "    try:",
            "        instance_id = os.environ['instance_id']",
            "        retain_days = int(os.environ['retain_days'])",
            "    except:",
            "        print('Environment variables [instance_id] and [retain_days] must be set')",
            "        raise",
            "",
            "    image_id, snapshot_timestamp = create_image(instance_id)",
            "    deregister_old_images(instance_id, retain_days)",
            "",
            "    return image_id"
            ]]}
        },
        "Runtime": "python2.7"
      }
    }
  },
  "Outputs": {
    "InstanceID": {
      "Description": "Instance ID",
      "Value": { "Ref": "Instance" }
    },
    "PrivateIP": {
      "Description": "Private IP",
      "Value": { "Fn::GetAtt": [ "Instance", "PrivateIp" ] }
    },
    "ElasticIP": {
      "Description": "Elastic IP",
      "Condition": "AssignElasticIP",
      "Value": { "Ref": "ElasticIP" }
    },
    "DNSNamePrivate": {
      "Description": "DNS Name",
      "Condition": "HaveHostedZone",
      "Value": { "Ref": "DNSRecordPrivate" }
    },
    "DNSNamePublic": {
      "Description": "DNS Name",
      "Condition": "AssignElasticIP_and_HaveHostedZone",
      "Value": { "Ref": "DNSRecordPublic" }
    }
  }
}
