---
AWSTemplateFormatVersion: '2010-09-09'

Description: Standard Pet-instance

Metadata:
  Author: Michael Ludvig <michael.ludvig@enterpriseit.co.nz>
  Description: |-
    SnapshotLambda creates AMI from the running instance based on the schedule.

Parameters:
  AssignSecurityGroup:
    Description: SecurityGroup ID to assign to the instance.
    Type: AWS::EC2::SecurityGroup::Id

  AssignElasticIP:
    Description: Allocate a new EIP or use only Private IPs?
    Type: String
    AllowedValues:
    - true
    - false
    Default: false

  HostedZone:
    Description: Route53 zone for the DNS records.
    Type: String

  HostedZoneId:
    Description: Route53 zone ID for the DNS records (e.g Z1234567890)
    Type: String

  ImageId:
    Description: AMI ID to use
    Type: AWS::EC2::Image::Id
    Default: ami-08589eca6dcc9b39c  # amzn2-ami-hvm-2.0.20181114-x86_64-gp2 / Amazon Linux 2 AMI 2.0.20181114 x86_64 HVM gp2

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro
    ConstraintDescription: Must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the EC2 instances
    Type: AWS::EC2::KeyPair::KeyName

  SnapshotDayOfWeek:
    Description: Day of week when Snapshot will be taken. Format "*" or "MON-SUN" or "WED,SAT"
    Type: String
    Default: MON-SUN

  SnapshotHour:
    Description: GMT Timezone hour when Snapshot will be taken. Set to -1 to disable
      automatic snapshots.
    Type: Number
    MaxValue: 23
    MinValue: -1
    Default: 17

  SnapshotMinute:
    Description: Minute after Snapshot hour when Snapshot will be taken. Ignored if
      SnapshotHour == -1.
    Type: Number
    MaxValue: 59
    MinValue: 0
    Default: 30

  SnapshotRetainDays:
    Description: Number of days to retain the snapshots for. Older Snapshots will
      be deleted.
    Type: Number
    MinValue: 1
    Default: 14

  SnsTopicArn:
    Description: SNS Notification Topic for AutoScaling and CloudWatch events
    Type: String
    Default: arn:aws:sns:ap-southeast-2:908357564651:EIT_AWS_Support

  VpcId:
    Description: The VPC where this stack will be deployed
    Type: AWS::EC2::VPC::Id

  SubnetId:
    Description: The subnets where this instance can be deployed. Select a Public subnet if AllocateElasticIP is True.
    Type: AWS::EC2::Subnet::Id

Conditions:
  AssignElasticIP: !Equals [ !Ref AssignElasticIP, true ]
  AutoSnapshot: !Not [ !Equals [ !Ref SnapshotHour, -1 ] ]

Resources:
  DNSRecordPrivate:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${HostedZone}."
      Name: !Sub "${AWS::StackName}.${HostedZone}."
      ResourceRecords:
      - !GetAtt Instance.PrivateIp
      TTL: 900
      Type: A

  ElasticIP:
    Type: AWS::EC2::EIP
    Condition: AssignElasticIP

  ElasticIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Condition: AssignElasticIP
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      NetworkInterfaceId: !Ref InstanceEni

  DNSRecordPublic:
    Type: AWS::Route53::RecordSet
    Condition: AssignElasticIP
    Properties:
      HostedZoneName: !Sub "${HostedZone}."
      Name: !Sub "${AWS::StackName}-pub.${HostedZone}."
      ResourceRecords:
      - Ref: ElasticIP
      TTL: 900
      Type: A

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
      Path: /
      Policies:
      - PolicyName: SelfSnapshot
        PolicyDocument:
          Statement:
          - Action:
            - ec2:DescribeInstance
            Effect: Allow
            Resource: '*'
          - Action:
            - cloudformation:DescribeStackResource
            Effect: Allow
            Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/SnapshotLambda"
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            #Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SnapshotLambda}"
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-SnapshotLambda-*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: InstanceRole

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: OVM Manager Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - Description: Access from EIT Internal - futher restricted by iptables
        IpProtocol: -1
        CidrIp: 192.168.128.0/20
      - Description: Access from EIT AWS - futher restricted by iptables
        IpProtocol: -1
        CidrIp: 192.168.144.0/22

  InstanceEni:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetId
      GroupSet:
      - !Ref AssignSecurityGroup
      - !Ref InstanceSecurityGroup
      SourceDestCheck: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  Instance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces:
      - NetworkInterfaceId: !Ref InstanceEni
        DeviceIndex: 0
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
      UserData:
        Fn::Base64: !Sub |-
          #cloud-config
          timezone: Pacific/Auckland
          hostname: ${AWS::StackName}.${HostedZone}
          preserve_hostname: false
          ssh_pwauth: True
          runcmd:
          - if [ -f /etc/profile.d/local.sh ]; then exit; fi
          - yum -y install epel-release
          - yum-config-manager --enable epel
          - /opt/aws/bin/cfn-init -v -r Instance --region ${AWS::Region} -s ${AWS::StackId}
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              bash-completion: []
              git: []
              patch: []
              jq: []
          files:
            /etc/profile.d/local.sh:
              source: https://gist.githubusercontent.com/mludvig/3840d8030bac5e7db95921baff87989a/raw/profile-local.sh
              owner: root
              group: root
              mode: '0644'
            /etc/pythonstart.py:
              source: https://gist.githubusercontent.com/mludvig/a0a72e4e363e67101d673f11da2160d7/raw/pythonstart.py
              owner: root
              group: root
              mode: '0644'
          commands:
            20-Git-Prompt:
              command: cp -vf /usr/share/doc/git-*/contrib/completion/git-prompt.sh /etc/bash_completion.d/
            30-Disable-CloudInit:
              # We don't want the instances re-spawn from Snapshot AMI reconfigured after boot
              command: chkconfig cloud-init off

  SnapshotRole:
    Type: AWS::IAM::Role
    Condition: AutoSnapshot
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/ReadOnlyAccess
      Path: /
      Policies:
      - PolicyName: CloudWatchLogsPolicy
        PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
      - PolicyName: SnapshotPolicy
        PolicyDocument:
          Statement:
          - Action:
            - iam:PassRole
            - ec2:CreateImage
            - ec2:CreateTags
            - ec2:RegisterImage
            - ec2:DeregisterImage
            - autoscaling:UpdateAutoScalingGroup
            - autoscaling:CreateLaunchConfiguration
            - autoscaling:DeleteLaunchConfiguration
            - cloudformation:UpdateStack
            Effect: Allow
            Resource: '*'

  SnapshotScheduler:
    Type: AWS::Events::Rule
    Condition: AutoSnapshot
    Properties:
      Description: Snapshot scheduler
      ScheduleExpression: !Sub "cron(${SnapshotMinute} ${SnapshotHour} ? * ${SnapshotDayOfWeek} *)"
      Targets:
      - Arn: !GetAtt SnapshotLambda.Arn
        Id: SnapshotLambda_Target
        Input: '{ "reboot": true }'
      - Arn: !GetAtt SnapshotRemoverLambda.Arn
        Id: SnapshotRemoverLambda_Target

  SnapshotSchedulerPermission:
    Type: AWS::Lambda::Permission
    Condition: AutoSnapshot
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SnapshotLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SnapshotScheduler.Arn

  SnapshotRemoverSchedulerPermission:
    Type: AWS::Lambda::Permission
    Condition: AutoSnapshot
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SnapshotRemoverLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SnapshotScheduler.Arn

  SnapshotLambda:
    Type: AWS::Lambda::Function
    Condition: AutoSnapshot
    Properties:
      Code:
        ZipFile:
          Fn::Join:
          - '

            '
          -
            - "%%{lambda-snapshot-instance.mini.py}%%"
      Environment:
        Variables:
          instance_id: !Ref Instance
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt SnapshotRole.Arn
      Runtime: python3.6
      Timeout: 10

  SnapshotRemoverLambda:
    Type: AWS::Lambda::Function
    Condition: AutoSnapshot
    Properties:
      Code:
        ZipFile:
          Fn::Join:
          - '

            '
          -
            - "%%{lambda-snapshot-remover.mini.py}%%"
      Environment:
        Variables:
          instance_id: !Ref Instance
          retain_days: !Ref SnapshotRetainDays
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt SnapshotRole.Arn
      Runtime: python3.6
      Timeout: 10
